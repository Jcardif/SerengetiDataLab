{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "serengetidatalabb37kfc5h"
		},
		"serengetidatalab-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'serengetidatalab-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:serengetidatalab.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"serengetidatalab-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://serengeti.dfs.core.windows.net"
		},
		"VaultSerengeti_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://serengetikeyvaultb37kfc5.vault.azure.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/MainPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "copy_zipped_metadata_files",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "copy_zipped_metadata_files",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					},
					{
						"name": "save_json_data_to_sql",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "copy_zipped_metadata_files",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "save_json_data_to_sql",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/copy_zipped_metadata_files')]",
				"[concat(variables('workspaceId'), '/notebooks/save_json_data_to_sql')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIContossoConn')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "cf0195d5-aa3b-4543-9b56-cdf9267a78fb",
					"tenantID": "3a2a5ab1-0e75-424a-a12a-892d7e3bbf85"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/serengetidatalab-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('serengetidatalab-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/serengetidatalab-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('serengetidatalab-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/drop_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DROP TABLE val\nDROP TABLE train\nDROP TABLE images\nDROP TABLE categories\nDROP TABLE annotations\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "defdedicated",
						"poolName": "defdedicated"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/copy_zipped_metadata_files')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "DefaultPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d652d6f2-0312-4307-ba9d-060c0e38e323"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_sparkdotnet",
						"display_name": "csharp"
					},
					"language_info": {
						"name": "csharp"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a1a27566-3e3c-42d7-a372-692095cd8521/resourceGroups/SerengetiDataLab/providers/Microsoft.Synapse/workspaces/serengetidatalab/bigDataPools/DefaultPool",
						"name": "DefaultPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						}
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#r \"nuget: Microsoft.Azure.Storage.Common\"\n",
							"#r \"nuget: Microsoft.Azure.Storage.Blob\"\n",
							"#r \"nuget: Microsoft.Azure.Storage.File\""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"using Microsoft.Azure.Storage;\n",
							"using Microsoft.Azure.Storage.Blob;\n",
							"using Microsoft.Azure.Storage.File;\n",
							"using System.IO;\n",
							"using System.IO.Compression;\n",
							"\n",
							"using CopyStatus = Microsoft.Azure.Storage.Blob.CopyStatus;\n",
							"using Microsoft.Spark.Extensions.Azure.Synapse.Analytics.Utils;\n",
							"using Microsoft.Azure.Storage.Auth;\n",
							"using Microsoft.Spark.Extensions.Azure.Synapse.Analytics.Notebook.MSSparkUtils;"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"CloudBlobContainer destContainer, sourceContainer;\n",
							"CloudBlobDirectory destDirectory;\n",
							"\n",
							"var accountKey = Credentials.GetSecret(\"VaultSerengeti\",\"ADLS-AccessKey\");\n",
							"string destConnectionString = $\"DefaultEndpointsProtocol=https;AccountName=serengeti;AccountKey={accountKey};EndpointSuffix=core.windows.net\";"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"private async Task InitSourceAndDest ()\n",
							"{\n",
							"    // Create a BlobEndpoint for the source container\n",
							"    string sourceConnectionString = \"BlobEndpoint=https://lilablobssc.blob.core.windows.net;\";\n",
							"    CloudStorageAccount sourceStorageAccount = CloudStorageAccount.Parse(sourceConnectionString);\n",
							"    CloudBlobClient sourceBlobClient = sourceStorageAccount.CreateCloudBlobClient();\n",
							"    sourceContainer = sourceBlobClient.GetContainerReference(\"snapshotserengeti-v-2-0\");\n",
							"\n",
							"    // Create a FileEndpoint for the destination ADLS\n",
							"    CloudStorageAccount destStorageAccount = CloudStorageAccount.Parse(destConnectionString);\n",
							"\n",
							"    var destBlobClient= destStorageAccount.CreateCloudBlobClient();\n",
							"    destContainer =  destBlobClient.GetContainerReference(\"snapshot-serengeti\");\n",
							"\n",
							"    if(! await destContainer.ExistsAsync())\n",
							"    {\n",
							"        await destContainer.CreateIfNotExistsAsync();\n",
							"    }\n",
							"\n",
							"    destDirectory = destContainer.GetDirectoryReference(\"metadata\");\n",
							"}"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"private async Task ExtractAndSaveZippedBlob(CloudBlockBlob sourceBlob,   CloudBlobDirectory destDirectory)\n",
							"{\n",
							"    using (var sourceStream = sourceBlob.OpenRead())\n",
							"    using (var archive = new ZipArchive(sourceStream))\n",
							"    {\n",
							"        foreach (var entry in archive.Entries)\n",
							"        {\n",
							"            var destBlob = destDirectory.GetBlockBlobReference(entry.FullName);\n",
							"\n",
							"            if (await destBlob.ExistsAsync())\n",
							"            {\n",
							"                Console.WriteLine($\"{destBlob.Name} exists\");\n",
							"                continue;\n",
							"            }\n",
							"\n",
							"\n",
							"            using (var entryStream = entry.Open())\n",
							"            {\n",
							"                Console.WriteLine($\"Uploading {destBlob.Name}\");\n",
							"                await destBlob.UploadFromStreamAsync(entryStream);\n",
							"            }\n",
							"        }\n",
							"    }\n",
							"}"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"private async Task CopyBlob(CloudBlockBlob sourceBlob, CloudBlockBlob destBlob)\n",
							"{\n",
							"    if (await destBlob.ExistsAsync())\n",
							"    {\n",
							"        Console.WriteLine($\"{destBlob.Name} exists\");\n",
							"        return;\n",
							"    }\n",
							"\n",
							"    await destBlob.StartCopyAsync(sourceBlob.Uri);\n",
							"\n",
							"    while (destBlob.CopyState.Status == CopyStatus.Pending)\n",
							"    {\n",
							"        await Task.Delay(1000); //wait for 1 second before checking again\n",
							"        await destBlob.FetchAttributesAsync();\n",
							"    }\n",
							"\n",
							"    if (destBlob.CopyState.Status == CopyStatus.Success)\n",
							"    {\n",
							"        Console.WriteLine(\"Copy operation succeeded\");\n",
							"    }\n",
							"    else\n",
							"    {\n",
							"        Console.WriteLine(\"Copy operation failed\");\n",
							"    }\n",
							"}\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"// s01 to s011\n",
							"var metadataZippedFiles=new string[]\n",
							"{\n",
							"    \"SnapshotSerengetiS01.json.zip\",\n",
							"    \"SnapshotSerengetiS02.json.zip\",\n",
							"    \"SnapshotSerengetiS03.json.zip\",\n",
							"    \"SnapshotSerengetiS04.json.zip\",\n",
							"    \"SnapshotSerengetiS05.json.zip\",\n",
							"    \"SnapshotSerengetiS06.json.zip\",\n",
							"    \"SnapshotSerengetiS07.json.zip\",\n",
							"    \"SnapshotSerengetiS08.json.zip\",\n",
							"    \"SnapshotSerengetiS09.json.zip\",\n",
							"    \"SnapshotSerengetiS10.json.zip\",\n",
							"    \"SnapshotSerengetiS11.json.zip\",\n",
							"    \"SnapshotSerengetiBboxes_20190903.json.zip\",\n",
							"\n",
							"};\n",
							"\n",
							"await InitSourceAndDest();\n",
							"\n",
							"foreach (var zippedFile in metadataZippedFiles)\n",
							"{\n",
							"    var sourceBlob = sourceContainer.GetBlockBlobReference(zippedFile);\n",
							"    await ExtractAndSaveZippedBlob(sourceBlob, destDirectory);\n",
							"}\n",
							"\n",
							"var jsonFiles = new string[]\n",
							"{\n",
							"        \"SnapshotSerengetiSplits_v0.json\"\n",
							"};\n",
							"\n",
							"foreach (var file in jsonFiles)\n",
							"{\n",
							"    var sourceBlob = sourceContainer.GetBlockBlobReference(file);\n",
							"    var destBlob = destDirectory.GetBlockBlobReference(file);\n",
							"    await CopyBlob(sourceBlob, destBlob);\n",
							"}\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/save_json_data_to_sql')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "amlpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "30g",
					"driverCores": 4,
					"executorMemory": "60g",
					"executorCores": 12,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f1c741e8-feb2-4ddc-9994-401ed82d1e96"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "csharp"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a1a27566-3e3c-42d7-a372-692095cd8521/resourceGroups/serengeti/providers/Microsoft.Synapse/workspaces/serengetidatalabb37kfc5h/bigDataPools/amlpool",
						"name": "amlpool",
						"type": "Spark",
						"endpoint": "https://serengetidatalabb37kfc5h.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/amlpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 16,
						"memory": 110,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 120
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"#r \"nuget: Microsoft.Azure.Storage.Common\"\n",
							"#r \"nuget: Microsoft.Azure.Storage.Blob\"\n",
							"#r \"nuget: Microsoft.Azure.Storage.File\"\n",
							"#r \"nuget: Newtonsoft.Json\"\n",
							"#r \"nuget: System.Data.SqlClient\""
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"using Microsoft.Azure.Storage;\n",
							"using Microsoft.Azure.Storage.Blob;\n",
							"using System.IO;\n",
							"using Newtonsoft.Json;\n",
							"using System.Data.SqlClient;\n",
							"using System.Data;\n",
							"using System.Threading;\n",
							"using Microsoft.Spark.Extensions.Azure.Synapse.Analytics.Notebook.MSSparkUtils;\n",
							"\n",
							"using System.Collections.Concurrent;"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"public class SerengetiData\n",
							"{\n",
							"    [JsonProperty(\"info\")]\n",
							"    public Info Info { get; set; }\n",
							"\n",
							"    [JsonProperty(\"categories\")]\n",
							"    public List<Category> Categories { get; set; }\n",
							"\n",
							"    [JsonProperty(\"images\")]\n",
							"    public List<Image> Images { get; set; }\n",
							"\n",
							"    [JsonProperty(\"annotations\")]\n",
							"    public List<Annotation> Annotations { get; set; }\n",
							"\n",
							"    public SerengetiData()\n",
							"    {\n",
							"        Info = new Info();\n",
							"        Categories = new List<Category>();\n",
							"        Images = new List<Image>();\n",
							"        Annotations = new List<Annotation>();\n",
							"    }\n",
							"}\n",
							"\n",
							"public class Annotation\n",
							"{\n",
							"    [JsonProperty(\"sequence_level_annotation\")]\n",
							"    public bool SequenceLevelAnnotation { get; set; }\n",
							"\n",
							"    [JsonProperty(\"id\")]\n",
							"    public string Id { get; set; }\n",
							"\n",
							"    [JsonProperty(\"category_id\")]\n",
							"    public long CategoryId { get; set; }\n",
							"\n",
							"    [JsonProperty(\"seq_id\")]\n",
							"    public string SeqId { get; set; }\n",
							"\n",
							"    [JsonProperty(\"season\")]\n",
							"    public string Season { get; set; }\n",
							"\n",
							"    [JsonProperty(\"datetime\")]\n",
							"    public DateTimeOffset Datetime { get; set; }\n",
							"\n",
							"    [JsonProperty(\"subject_id\")]\n",
							"    public string SubjectId { get; set; }\n",
							"\n",
							"    [JsonProperty(\"count\")]\n",
							"    public object Count { get; set; }\n",
							"\n",
							"    [JsonProperty(\"standing\")]\n",
							"    public object Standing { get; set; }\n",
							"\n",
							"    [JsonProperty(\"resting\")]\n",
							"    public object Resting { get; set; }\n",
							"\n",
							"    [JsonProperty(\"moving\")]\n",
							"    public object Moving { get; set; }\n",
							"\n",
							"    [JsonProperty(\"interacting\")]\n",
							"    public object Interacting { get; set; }\n",
							"\n",
							"    [JsonProperty(\"young_present\")]\n",
							"    public object YoungPresent { get; set; }\n",
							"\n",
							"    [JsonProperty(\"image_id\")]\n",
							"    public string ImageId { get; set; }\n",
							"\n",
							"    [JsonProperty(\"location\")]\n",
							"    public string Location { get; set; }\n",
							"}\n",
							"\n",
							"public class Category\n",
							"{\n",
							"    [JsonProperty(\"id\")]\n",
							"    public long Id { get; set; }\n",
							"\n",
							"    [JsonProperty(\"name\")]\n",
							"    public string Name { get; set; }\n",
							"}\n",
							"\n",
							"public class Image\n",
							"{\n",
							"    [JsonProperty(\"id\")]\n",
							"    public string Id { get; set; }\n",
							"\n",
							"    [JsonProperty(\"file_name\")]\n",
							"    public string FileName { get; set; }\n",
							"\n",
							"    [JsonProperty(\"frame_num\")]\n",
							"    public long FrameNum { get; set; }\n",
							"\n",
							"    [JsonProperty(\"seq_id\")]\n",
							"    public string SeqId { get; set; }\n",
							"\n",
							"    [JsonProperty(\"width\")]\n",
							"    public long Width { get; set; }\n",
							"\n",
							"    [JsonProperty(\"height\")]\n",
							"    public long Height { get; set; }\n",
							"\n",
							"    [JsonProperty(\"corrupt\")]\n",
							"    public bool Corrupt { get; set; }\n",
							"\n",
							"    [JsonProperty(\"location\")]\n",
							"    public string Location { get; set; }\n",
							"\n",
							"    [JsonProperty(\"seq_num_frames\")]\n",
							"    public long SeqNumFrames { get; set; }\n",
							"\n",
							"    [JsonProperty(\"datetime\")]\n",
							"    public DateTimeOffset Datetime { get; set; }\n",
							"}\n",
							"\n",
							"public class Info\n",
							"{\n",
							"    [JsonProperty(\"version\")]\n",
							"    public string Version { get; set; }\n",
							"\n",
							"    [JsonProperty(\"description\")]\n",
							"    public string Description { get; set; }\n",
							"\n",
							"    [JsonProperty(\"date_created\")]\n",
							"    public long DateCreated { get; set; }\n",
							"\n",
							"    [JsonProperty(\"contributor\")]\n",
							"    public string Contributor { get; set; }\n",
							"}"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"CloudBlobContainer blobContainer;\n",
							"CloudBlobDirectory blobDirectory;\n",
							"//int batchSize = 500;\n",
							"\n",
							"var accountKey = Credentials.GetSecret(\"serengetikeyvaultb37kfc5\",\"ADLS-AccessKey\");\n",
							"string storageConnectionString = $\"DefaultEndpointsProtocol=https;AccountName=serengetistoreb37kfc5hmy;AccountKey={accountKey};EndpointSuffix=core.windows.net\";\n",
							"\n",
							"var password = Credentials.GetSecret(\"serengetikeyvaultb37kfc5\",\"SqlPoolPassword\");\n",
							"var dbConnectionString = $\"Server=tcp:serengetidatalabb37kfc5h.sql.azuresynapse.net,1433;Initial Catalog=defdedicated;Persist Security Info=False;User ID=sqladminuser;Password={password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=300;\";\n",
							"\n",
							"private void InitStorageAndDb()\n",
							"{\n",
							"    // Create a FileEndpoint for the destination ADLS\n",
							"    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(storageConnectionString);\n",
							"\n",
							"    var blobClient= storageAccount.CreateCloudBlobClient();\n",
							"    blobContainer =  blobClient.GetContainerReference(\"snapshot-serengeti\");\n",
							"    blobDirectory = blobContainer.GetDirectoryReference(\"metadata\");\n",
							"}"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"private async Task<T> ReadJsonFileAsync<T> (CloudBlockBlob jsonBlob)\n",
							"{\n",
							"    using (var memoryStream = new MemoryStream())\n",
							"    {\n",
							"        // Download the JSON file to a memory stream\n",
							"        await jsonBlob.DownloadToStreamAsync(memoryStream);\n",
							"\n",
							"        // Reset the memory stream position\n",
							"        memoryStream.Position = 0;\n",
							"\n",
							"        // Use a JsonTextReader to read the JSON file in chunks\n",
							"        using (var jsonTextReader = new JsonTextReader(new StreamReader(memoryStream)) { CloseInput = false })\n",
							"        {\n",
							"            // Use a JsonSerializer to deserialize the JSON file\n",
							"            var jsonSerializer = new JsonSerializer();\n",
							"\n",
							"            // Read the JSON file in chunks and deserialize it\n",
							"            return jsonSerializer.Deserialize<T>(jsonTextReader);\n",
							"        }\n",
							"    }\n",
							"}\n",
							""
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"private async Task CreateTablesAsync()\n",
							"{\n",
							"    var commands = new Dictionary<string, string>()\n",
							"    {\n",
							"        {\"images\", \"CREATE TABLE images (id VARCHAR(255), file_name VARCHAR(255), frame_num INT, seq_id VARCHAR(255), width INT, height INT, corrupt BIT, location VARCHAR(255), seq_num_frames INT, datetime DATETIME);\"},\n",
							"        {\"categories\", \"CREATE TABLE categories (id INT, name VARCHAR(255));\"},\n",
							"        {\"annotations\", \"CREATE TABLE annotations ( id VARCHAR(255) NOT NULL, category_id INT NOT NULL, seq_id VARCHAR(255) NOT NULL, season VARCHAR(255) NOT NULL, datetime DATETIME NOT NULL, image_id VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL );\"},\n",
							"        {\"train\", \"CREATE TABLE train ( image_id VARCHAR(255), category_id INT);\"},\n",
							"        {\"val\", \"CREATE TABLE val ( image_id VARCHAR(255), category_id INT);\"}\n",
							"    };\n",
							"\n",
							"    using(var conn = new SqlConnection(dbConnectionString))\n",
							"    {\n",
							"        await conn.OpenAsync();\n",
							"        foreach(var command in commands)\n",
							"        {\n",
							"            using(SqlCommand sqlCmd =new SqlCommand(command.Value, conn))\n",
							"            {\n",
							"                try\n",
							"                {\n",
							"                    await sqlCmd.ExecuteNonQueryAsync();\n",
							"                    Console.WriteLine($\"Table {command.Key} created successfully.\");\n",
							"                }\n",
							"                catch(Exception ex)\n",
							"                {\n",
							"                    Console.WriteLine($\"Error creating table {command.Key}: \" + ex.Message);\n",
							"                }\n",
							"            }   \n",
							"        }\n",
							"    }\n",
							"}"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"private async Task BulkInsertImages(List<Image> images)\n",
							"{\n",
							"    using(var conn = new SqlConnection(dbConnectionString))\n",
							"    {\n",
							"        await conn.OpenAsync();\n",
							"        using(var bulkCpy = new SqlBulkCopy(conn))\n",
							"        {\n",
							"            bulkCpy.DestinationTableName=\"images\";\n",
							"\n",
							"            var dataTable = new DataTable();\n",
							"            dataTable.Columns.Add(\"id\", typeof(string));\n",
							"            dataTable.Columns.Add(\"file_name\", typeof(string));\n",
							"            dataTable.Columns.Add(\"frame_num\", typeof(long));\n",
							"            dataTable.Columns.Add(\"seq_id\", typeof(string));\n",
							"            dataTable.Columns.Add(\"width\", typeof(long));\n",
							"            dataTable.Columns.Add(\"height\", typeof(long));\n",
							"            dataTable.Columns.Add(\"corrupt\", typeof(bool));\n",
							"            dataTable.Columns.Add(\"location\", typeof(string));\n",
							"            dataTable.Columns.Add(\"seq_num_frames\", typeof(long));\n",
							"            dataTable.Columns.Add(\"datetime\", typeof(DateTime));\n",
							"\n",
							"            foreach (var image in images)\n",
							"            {\n",
							"                var row = dataTable.NewRow();\n",
							"                row[\"id\"] = image.Id;\n",
							"                row[\"file_name\"] = image.FileName;\n",
							"                row[\"frame_num\"] = image.FrameNum;\n",
							"                row[\"seq_id\"] = image.SeqId;\n",
							"                row[\"width\"] = image.Width;\n",
							"                row[\"height\"] = image.Height;\n",
							"                row[\"corrupt\"] = image.Corrupt;\n",
							"                row[\"location\"] = image.Location;\n",
							"                row[\"seq_num_frames\"] = image.SeqNumFrames;\n",
							"                row[\"datetime\"] = image.Datetime.DateTime;\n",
							"\n",
							"                dataTable.Rows.Add(row);\n",
							"            }\n",
							"\n",
							"            await Task.Run(() => bulkCpy.WriteToServer(dataTable));\n",
							"        }\n",
							"    }\n",
							"}\n",
							""
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"private async Task BulkInsertCategories(List<Category> categories)\n",
							"{\n",
							"    using(var conn = new SqlConnection(dbConnectionString))\n",
							"    {\n",
							"        await conn.OpenAsync();\n",
							"        using (var bulkCpy = new SqlBulkCopy(conn))\n",
							"        {\n",
							"            bulkCpy.DestinationTableName = \"categories\";\n",
							"\n",
							"            var dataTable = new DataTable();\n",
							"            dataTable.Columns.Add(\"id\", typeof(long));\n",
							"            dataTable.Columns.Add(\"name\", typeof(string));\n",
							"\n",
							"            foreach(var category in categories)\n",
							"            {\n",
							"                var row = dataTable.NewRow();\n",
							"                row[\"id\"] = category.Id;\n",
							"                row[\"name\"] = category.Name;\n",
							"                dataTable.Rows.Add(row);\n",
							"            }\n",
							"\n",
							"            await Task.Run(() => bulkCpy.WriteToServer(dataTable));\n",
							"        }\n",
							"    }\n",
							"}\n",
							""
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"private async Task BulkInsertAnnotations(List<Annotation> annotations)\n",
							"{\n",
							"    using(var conn = new SqlConnection(dbConnectionString))\n",
							"    {\n",
							"        await conn.OpenAsync();\n",
							"        using (var bulkCpy = new SqlBulkCopy(conn))\n",
							"        {\n",
							"            bulkCpy.DestinationTableName = \"annotations\";\n",
							"\n",
							"            var dataTable = new DataTable();\n",
							"            dataTable.Columns.Add(\"id\", typeof(string));\n",
							"            dataTable.Columns.Add(\"category_id\", typeof(long));\n",
							"            dataTable.Columns.Add(\"seq_id\", typeof(string));\n",
							"            dataTable.Columns.Add(\"season\", typeof(string));\n",
							"            dataTable.Columns.Add(\"datetime\", typeof(DateTime));\n",
							"            dataTable.Columns.Add(\"image_id\", typeof(string));\n",
							"            dataTable.Columns.Add(\"location\", typeof(string));\n",
							"\n",
							"            foreach (var annotation in annotations)\n",
							"            {\n",
							"                var row = dataTable.NewRow();\n",
							"                row[\"id\"] = annotation.Id;\n",
							"                row[\"category_id\"] = annotation.CategoryId;\n",
							"                row[\"seq_id\"] = annotation.SeqId;\n",
							"                row[\"season\"] = annotation.Season;\n",
							"                row[\"datetime\"] = annotation.Datetime.LocalDateTime;\n",
							"                row[\"image_id\"] = annotation.ImageId;\n",
							"                row[\"location\"] = annotation.Location;\n",
							"                dataTable.Rows.Add(row);\n",
							"            }\n",
							"\n",
							"            await bulkCpy.WriteToServerAsync(dataTable);\n",
							"        }\n",
							"    }\n",
							"}\n",
							""
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"private async Task InsertSplitImages(string table, List<string> locations)\n",
							"{\n",
							"    using(var conn = new SqlConnection(dbConnectionString))\n",
							"    {\n",
							"        await conn.OpenAsync();\n",
							"        using (SqlCommand command = new SqlCommand($\"INSERT INTO {table} (image_id, category_id) SELECT image_id, category_id FROM annotations WHERE location IN ({string.Join(\",\", locations.Select(x => $\"'{x}'\"))}) AND category_id > 1\", conn)\n",
							", conn)\n",
							")\n",
							"        {\n",
							"            command.ExecuteNonQuery();\n",
							"        }\n",
							"    }\n",
							"}"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"InitStorageAndDb();\n",
							"await CreateTablesAsync();\n",
							"\n",
							"//season files\n",
							"var seasonFiles = new List<string>()\n",
							"{\n",
							"    \"SnapshotSerengetiS01.json\",\n",
							"    \"SnapshotSerengetiS02.json\",\n",
							"    \"SnapshotSerengetiS03.json\",\n",
							"    \"SnapshotSerengetiS04.json\",\n",
							"    \"SnapshotSerengetiS05.json\",\n",
							"    \"SnapshotSerengetiS06.json\",\n",
							"    \"SnapshotSerengetiS07.json\",\n",
							"    \"SnapshotSerengetiS08.json\",\n",
							"    \"SnapshotSerengetiS09.json\",\n",
							"    \"SnapshotSerengetiS10.json\",\n",
							"    \"SnapshotSerengetiS11.json\"\n",
							"};"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"var firstFile = seasonFiles.First();\n",
							"var firstBlob = blobDirectory.GetBlockBlobReference(firstFile);\n",
							"var firstSerengetiData = await ReadJsonFileAsync<SerengetiData>(firstBlob);\n",
							"\n",
							"await BulkInsertCategories(firstSerengetiData.Categories);\n",
							"await BulkInsertImages(firstSerengetiData.Images);\n",
							"await BulkInsertAnnotations(firstSerengetiData.Annotations);\n",
							"\n",
							"Console.WriteLine($\"Completed processing {firstFile} \");\n",
							"\n",
							"\n",
							"var tasks = new List<Task>();\n",
							"\n",
							"Parallel.For(1, seasonFiles.Count, i =>\n",
							"{\n",
							"    tasks.Add(Task.Run(async () =>\n",
							"    {\n",
							"        var file = seasonFiles[i];\n",
							"        var blob = blobDirectory.GetBlockBlobReference(file);\n",
							"        var serengetiData = await ReadJsonFileAsync<SerengetiData>(blob);\n",
							"        await BulkInsertImages(serengetiData.Images);\n",
							"        await BulkInsertAnnotations(serengetiData.Annotations);\n",
							"\n",
							"        Console.WriteLine($\"Completed processing {file} \");\n",
							"    }));\n",
							"});\n",
							"\n",
							"await Task.WhenAll(tasks);\n",
							""
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"var blob = blobDirectory.GetBlockBlobReference(\"SnapshotSerengetiSplits_v0.json\");\n",
							"var splitData = await ReadJsonFileAsync<dynamic>(blob);\n",
							"\n",
							"await InsertSplitImages(\"train\", splitData.splits.train.ToObject<List<string>>());\n",
							"await InsertSplitImages(\"val\", splitData.splits.val.ToObject<List<string>>());"
						],
						"outputs": [],
						"execution_count": 47
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/defdedicated')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/select')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT * FROM train\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "defdedicated",
						"poolName": "defdedicated"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/amlpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VaultSerengeti')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('VaultSerengeti_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		}
	]
}